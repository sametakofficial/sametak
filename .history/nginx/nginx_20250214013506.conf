# How many workers to use. (Number of CPU's)
# Set to auto is best, but for the rtmp stats can only be read from one worker
# https://github.com/arut/nginx-patches
worker_processes 4;

# used to set global options that affect how Nginx handles connections at a general level
events {
    worker_connections 10000;
}
 # NOTE: Can handle worker_processes * worker_connection  = clients servable
# For info on all settings look at
# https://github.com/dreamsxin/nginx-rtmp-wiki/blob/master/Directives.md
rtmp {
    server {
        listen 1935; # port listening to incoming stream
        chunk_size 4096; # Maximum chunk size for stream multiplexing. Default is 4096. The bigger this value the lower CPU overhead.

        # This application is to accept incoming stream
        application live {
            live on; # Allows live input

            # UnComment out on_publish lines to enable key validation
            #on_publish http://docker.for.mac.host.internal:5000/api/stream/start;
            #on_publish_done http://docker.for.mac.host.internal:5000/api/stream/end;

            # ffmpeg (potential resolutions 426x240, 640x360, 854x480, 1280x720, 1920x1080)
            # We are not degrading audio-quality here only video.
            # To enable more qualities simply uncomment the lines below. Don't forget to adjust the ; as well as uncomment the hls_variant below!
            exec ffmpeg -i rtmp://localhost/live/$name
              -c:v libx264 -x264opts keyint=60:no-scenecut -b:v 125k -c:a copy -s 426x240 -r 30 -sws_flags bilinear -tune zerolatency -preset veryfast -f flv rtmp://localhost/show/$name_subsd
              -c:v libx264 -x264opts keyint=60:no-scenecut -b:v 450k -c:a copy -s 854x480 -r 30 -sws_flags bilinear -tune zerolatency -preset veryfast -f flv rtmp://localhost/show/$name_sd
              -c:v libx264 -x264opts keyint=60:no-scenecut -c:a copy -r 30 -tune zerolatency -preset veryfast -f flv rtmp://localhost/show/$name_hd;
        }

        # This application is for splitting the stream into HLS fragments
        application show {
            live on; # Allows live input from above
            hls on; # Enable HTTP Live Streaming
            hls_type live; # Either 'event' or 'live' (live means played from current live position)
            deny play all; # Disable consuming the stream from nginx as rtmp

            hls_fragment 2s;
            hls_playlist_length 10s;
            hls_path /hls/;  # Stream key'ye göre ayrı klasör   

            hls_variant _subsd BANDWIDTH=400000;
            hls_variant _sd BANDWIDTH=1000000;
            hls_variant _hd BANDWIDTH=5000000;


            # CORS ayarları
            add_header Access-Control-Allow-Origin *;  # HLS dosyalarının tüm domainlerden erişilmesine izin verir
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';  # İzin verilen HTTP yöntemleri
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization';  # İzin verilen başlıklar
        
        }
    }
}
# HTTP can be used for accessing RTMP stats
server {
    listen 80;

    # Next.js uygulaması için
    location / {
        proxy_pass http://frontend:3001;  # Next.js uygulamanızın konteynerine yönlendirme
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # HLS dosyalarına /hls/ yolu üzerinden erişim
    location /hls/ {

            types {
                application/vnd.apple.mpegurl m3u8;
}
        root /hls;  # HLS dosyalarınızın bulunduğu dizini belirtiyoruz

        # Autoindex ve diğer CORS başlıklarını da ekliyoruz
        autoindex on;
        add_header 'Cache-Control' 'no-cache';
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        add_header 'Access-Control-Allow-Headers' 'Range';

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Headers' 'Range';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
}
